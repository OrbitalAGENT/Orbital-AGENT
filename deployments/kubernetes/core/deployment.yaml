# deployments/kubernetes/core/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orbital-agent
  labels:
    app.kubernetes.io/part-of: orbital-agent
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: orbital-agent
  template:
    metadata:
      labels:
        app: orbital-agent
    spec:
      serviceAccountName: orbital-agent
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: agent
        image: orbital/agent:1.0.0
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: orbital-config
        - secretRef:
            name: orbital-secrets
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 1
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["pgrep", "-f", "orbital-agent"]
---
# deployments/kubernetes/core/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orbital-agent
spec:
  selector:
    app: orbital-agent
  ports:
  - name: http
    port: 80
    targetPort: 8080
  type: LoadBalancer
---
# deployments/kubernetes/config/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orbital-config
data:
  config.yaml: |
    network:
      api_endpoint: "0.0.0.0:8080"
      internal_subnet: "10.42.0.0/24"
    compliance:
      policy_engine:
        evaluation_mode: "realtime"
---
# deployments/kubernetes/secrets/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orbital-secrets
type: Opaque
data:
  tls.crt: LS0tLS1CRUd...tCg==
  tls.key: LS0tLS1CRU...0tLS0K
---
# deployments/helm/Chart.yaml
apiVersion: v2
name: orbital-agent
description: Orbital Agent Deployment
version: 1.0.0
dependencies:
- name: redis
  version: 14.8.8
  repository: https://charts.bitnami.com/bitnami
- name: kafka
  version: 14.7.1
  repository: https://charts.bitnami.com/bitnami
---
# deployments/terraform/main.tf
module "orbital_cluster" {
  source = "terraform-aws-modules/eks/aws"
  
  cluster_name = "orbital-prod"
  cluster_version = "1.24"
  vpc_id = module.vpc.vpc_id
  subnets = module.vpc.private_subnets

  worker_groups = [{
    instance_type = "m5.2xlarge"
    asg_max_size = 10
    asg_min_size = 3
  }]
}

resource "aws_rds_cluster" "orbital_db" {
  engine = "aurora-postgresql"
  database_name = "orbital"
  master_username = "admin"
  master_password = var.db_password
  backup_retention_period = 7
  preferred_backup_window = "07:00-09:00"
}
---
# deployments/docker-compose.yml
version: '3.8'

services:
  orbital-agent:
    image: orbital/agent:latest
    environment:
      - CONFIG_PATH=/etc/orbital
    volumes:
      - ./config:/etc/orbital
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - kafka

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
---
# deployments/ansible/playbook.yml
- hosts: orbital_servers
  become: yes
  vars:
    orbital_version: 1.0.0
  tasks:
  - name: Install dependencies
    apt:
      name: ["docker-ce", "docker-ce-cli"]
      state: present

  - name: Create config directory
    file:
      path: /etc/orbital
      state: directory
      mode: 0755

  - name: Deploy configuration
    copy:
      src: "{{ item }}"
      dest: /etc/orbital/
    loop:
      - config/base.yaml
      - config/swarm.yaml

  - name: Start Orbital Agent
    docker_container:
      name: orbital-agent
      image: orbital/agent:{{ orbital_version }}
      state: started
      restart: yes
      ports:
        - "8080:8080"
      volumes:
        - "/etc/orbital:/etc/orbital"
---
# deployments/scripts/healthcheck.sh
#!/bin/bash

# Health check endpoints
API_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/health)
KAFKA_STATUS=$(kcat -L -b localhost:9092 | grep -q "3 brokers" && echo 200 || echo 500)

if [ "$API_STATUS" -eq 200 ] && [ "$KAFKA_STATUS" -eq 200 ]; then
  echo "Healthy"
  exit 0
else
  echo "Unhealthy"
  exit 1
fi
---
# deployments/monitoring/dashboards/agent-dashboard.json
{
  "title": "Orbital Agent Metrics",
  "panels": [
    {
      "type": "graph",
      "title": "API Throughput",
      "targets": [{
        "expr": "sum(rate(http_requests_total[5m]))",
        "legendFormat": "Requests/sec"
      }]
    },
    {
      "type": "singlestat",
      "title": "Active Nodes",
      "targets": [{
        "expr": "count(swarm_nodes_active)"
      }]
    }
  ]
}
